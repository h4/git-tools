#!/bin/bash
# ------------------------------------------------------------------
# [Author] Mikhail Baranov <mkhl@brnv.ru>
#          Find and remove branches that already merged 
#          in main branch
# ------------------------------------------------------------------

# shell output
warn() { echo "$@" >&2; }
die() { warn "$@"; exit 1; }

VERSION=0.1.0

MAIN_BRANCH="develop"
MERGED=""
EXCLUDED="master develop"
FORCE=0
LIST_ONLY=0

help() {
	echo "Find and remove branches that already merged in main branch"
	echo ""
	echo "usage: git-tools clean-merged [-h|-v|-f|-l] [-b BRANCH_NAME]"
	echo ""
	echo "available options:"
	echo "  -h              print this help"
	echo "  -v              print version"
	echo "  -f              force mode"
	echo "  -l              print list of merged branches"
	echo "  -b BRANCH_NAME  set BRANCH_NAME as main branch (default \"develop\")"
}

while getopts ":hvflb:" option; do
	case $option in
		"h" )
			help
			exit 0
			;;
		"v" )
			echo "Version: ${VERSION}"
			exit 0
			;;
		"f" )
			FORCE=1
			;;
		"l" )
			LIST_ONLY=1
			;;
		"b" )
			MAIN_BRANCH=$OPTARG
			;;
		\? )
			echo "Unknown option: -$OPTARG"
			exit 1
			;;
	esac
done

init() {
	require_git_repo
	get_merged_branches
	if [ $LIST_ONLY -eq 0 ]
		then
		delete_merged
	fi
}

# are we in git repo directory?
require_git_repo() {
	if ! git rev-parse --git-dir >/dev/null 2>&1; then
		die "fatal: Not a git repository"
	fi
}

check_main_branch() {
	COUNT=$( git branch -l | grep ${MAIN_BRANCH} | wc -l )
	if [ $COUNT -eq 0 ]
		then
		die "branch '${MAIN_BRANCH}' is not exists"
	fi
}

get_merged_branches() {
	check_main_branch
	MERGED=$( git branch --merged ${MAIN_BRANCH}  | cut -c 3-)
	if [ $FORCE -eq 1 ]
		then
		return 0
	fi

	echo "Branches already merged into branch ${MAIN_BRANCH}:" 
	for branch in $MERGED
		do echo "  $branch"
	done
}

branch_is_excluded() {
	current_brahch=$1
	for excluded_branch in $EXCLUDED
		do
			if [ "${excluded_branch}" = "${current_brahch}" ]
				then 
				return 1
			fi
	done
	return 0
}

delete_merged() {
	if [ $FORCE -eq 1 ]
		then
		confirmed="y"
	else
		echo -n "Delete this? y/[n]: "
		read confirmed
	fi

	if [ "$confirmed" = "y" ]
		then
		echo "Trying to delete branches..."
		for branch in $MERGED
			do 
				branch_is_excluded ${branch}
				excluded=$?
				if [ $excluded -eq 0 ]
					then
					git branch -d ${branch}
					echo "  branch ${branch} deleted"
				fi
		done
		echo "Finished"
	else
		echo "Ok, exit"
	fi
}

init
